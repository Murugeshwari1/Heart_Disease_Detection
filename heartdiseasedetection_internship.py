# -*- coding: utf-8 -*-
"""HeartDiseaseDetection-Internship.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-DReHX6wNbMU5OIm5ibSX3nyZKY0-sZy
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, f1_score, confusion_matrix
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv1D, Flatten, Dropout, MaxPooling1D
from tensorflow.keras.utils import to_categorical
import matplotlib.pyplot as plt

# Load and preprocess data
heartdata = pd.read_csv("/content/drive/MyDrive/heart.csv")

X = heartdata.drop(columns='target', axis=1)
y = heartdata['target']

# Reshape data for CNN
X = np.expand_dims(X.values, axis=2)

# One-hot encode the target variable
y = to_categorical(y, num_classes=2)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=2)

# Build CNN model
model = Sequential()
model.add(Conv1D(filters=64, kernel_size=2, activation='relu', input_shape=(X.shape[1], 1)))
model.add(MaxPooling1D(pool_size=2))
model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(2, activation='softmax'))

# Compile model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train model
history = model.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test))

# Evaluate model
y_pred = np.argmax(model.predict(X_test), axis=1)
y_true = np.argmax(y_test, axis=1)

acc_cnn = accuracy_score(y_true, y_pred)
print("CNN accuracy:", acc_cnn)

f1_cnn = f1_score(y_true, y_pred)
print("CNN F1 score:", f1_cnn)

cm_cnn = confusion_matrix(y_true, y_pred)
print("CNN confusion matrix:")
print(cm_cnn)

# Plot training & validation accuracy values
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')

# Plot training & validation loss values
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')

plt.show()

model.save("heart.h5")

KNN

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load the heart disease dataset
heartdata = pd.read_csv("/content/drive/MyDrive/heart.csv")

# Separate features and target
X = heartdata.drop(columns='target', axis=1)
y = heartdata['target']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=2)

# Create and fit a KNN classifier
knn_model = KNeighborsClassifier(n_neighbors=5)
knn_model.fit(X_train, y_train)

# Make predictions on the testing set
y_pred_knn = knn_model.predict(X_test)

# Calculate the accuracy of the model
acc_knn = accuracy_score(y_test, y_pred_knn)
print("KNN accuracy:", acc_knn)

# Make predictions on a single example
example = [[71, 0, 0, 112, 149, 0, 1, 125, 0, 1.6, 1, 0, 2]]
prediction = knn_model.predict(example)
if prediction[0] == 0:
    print("Patient does not have any heart disease")
else:
    print("Patient has heart disease and needs more tests")

# Calculate the f1 score
f1_knn = classification_report(y_test, y_pred_knn)
print("KNN f1 score:")
print(f1_knn)

# Calculate the confusion matrix
cm_knn = confusion_matrix(y_test, y_pred_knn)
print("KNN confusion matrix:")
print(cm_knn)

SVM

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report, confusion_matrix
heartdata = pd.read_csv("/content/drive/MyDrive/heart.csv")

# all columns
X = heartdata.drop(columns='target', axis=1)
# target column
y = heartdata['target']

# split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=2)

# create and fit the SVM model
svm_model = SVC(kernel='linear')
svm_model.fit(X_train, y_train)

# make predictions on the testing set
y_pred_svm = svm_model.predict(X_test)

# calculate accuracy of the model
acc_svm = accuracy_score(y_test, y_pred_svm)
print("SVM accuracy:", acc_svm)

# make predictions on a single example
example = [[71, 0, 0, 112, 149, 0, 1, 125, 0, 1.6, 1, 0, 2]]
prediction = svm_model.predict(example)
if prediction[0] == 0:
    print("Patient does not have any heart disease")
else:
    print("Patient has heart disease and needs more tests")
# Calculate f1 score
f1_svm = classification_report(y_test, y_pred_svm)
print("SVM f1 score:")
print(f1_svm)

# Calculate confusion matrix
cm_svm = confusion_matrix(y_test, y_pred_svm)
print("SVM confusion matrix:")
print(cm_svm)